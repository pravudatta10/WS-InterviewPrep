STREAM API
-----------------------
 //WAP using streams to filter even numbers from the list: [2, 5, 8, 11, 14, 17, 20]
    public static void m1() {
        List<Integer> num = numbers.stream().filter(item -> item % 2 == 0).toList();
        System.out.println(num);
    }

    public static void m2(List<Student> indianStudents) {
        List<String> names = indianStudents.stream().filter(item -> item.getId() % 2 == 0).map(Student::getName).toList();
        System.out.println(names);
    }

    //WAP using streams to calculate the sum of squares of integers in the list: [1, 3, 5, 7, 9].
    public static void m3() {
        List<Integer> num = Arrays.asList(1, 3, 5, 7, 9);
        int res = num.stream().map(item -> item * item).reduce(0, Integer::sum);
        System.out.println(res);
    }

    //. WAP using streams to convert a list of strings to uppercase: [apple, banana, orange, grape].
    public static void m4() {
        List<String> stringList = Arrays.asList("apple", "banana", "orange", "grape");
        List<String> list = stringList.stream().map(String::toUpperCase).toList();
        System.out.println(list);
    }

    //. WAP using streams to find the maximum element from the list: [15, 23, 10, 45, 8, 32].
    public static void m5() {
        List<Integer> num = Arrays.asList(15, 23, 10, 45, 8, 32);
        int x = num.stream().max(Comparator.naturalOrder()).get();
        System.out.println(x);
    }

    /// /WAP using streams to check if all elements in the list are positive: [4, -7, 12, 0, 9, -2]
    public static void m6() {
        List<Integer> num = Arrays.asList(15, 23, 10, 45, 8, 32);
        boolean bool = num.stream().allMatch(item -> item >= 0);
        System.out.println(bool);
    }

    //WAP using streams to remove duplicate elements from the list: [3, 6, 9, 3, 12, 6, 15].
    public static void m7() {
        List<Integer> num = Arrays.asList(3, 6, 9, 3, 12, 6, 15);
        List<Integer> res = num.stream().distinct().toList();
        System.out.println(res);
    }

    //WAP using streams to sort a list of strings in ascending order: [banana, apple, orange, grape].
    public static void m8() {
        List<String> sortedNames = names.stream().sorted(Comparator.naturalOrder()).toList();
        System.out.println(sortedNames);
    }

    //WAP using streams to find the average of numbers in the list: [10, 15, 20, 25, 30].
    public static void m9() {
        List<Integer> num = Arrays.asList(10, 15, 20, 25, 30);
        double d = num.stream().mapToInt(Integer::intValue).average().getAsDouble();
        System.out.println(d);
    }

    // WAP using streams to concatenate all strings in the list: [hello, world, java, streams].
    public static void m10() {
        List<String> stringList = Arrays.asList("hello", "world", "java", "streams");
        String str = stringList.stream().collect(Collectors.joining(" "));
        System.out.println(str);
    }

    //WAP using streams to count the number of occurrences of a specific element in the list: [2, 4, 6, 4, 8, 4, 10].
    public static void m11() {
        List<Integer> integerList = Arrays.asList(2, 4, 6, 4, 8, 4, 10);
        Map<Integer, Long> map = integerList.stream().collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
        System.out.println(map);
    }

    //WAP using streams to find the second-smallest element in the list: [5, 10, 3, 8, 15, 7].
    public static void m12() {
        List<Integer> integerList = Arrays.asList(5, 10, 3, 8, 15, 7);
        int x = integerList.stream().sorted().skip(1).findFirst().get();
        System.out.println(x);
    }

    //WAP using streams to group elements of a list by their lengths: [apple, banana, orange, grape].
    public static void m13() {
        List<String> stringList = Arrays.asList("apple", "banana", "orange", "grape");
        Map<Integer, List<String>> map = stringList.stream().collect(Collectors.groupingBy(String::length));
        System.out.println(map);
    }

    //WAP using streams to partition a list into two groups based on a predicate: [1, 2, 3, 4, 5, 6, 7, 8, 9]
    public static void m14() {
        List<Integer> integerList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);
        Map<Boolean, List<Integer>> map = integerList.stream().collect(Collectors.partitioningBy(item -> item % 2 == 0));
        System.out.println(map);
    }

    //WAP using streams to find the longest string in the list: [hello, world, java, streams]
    public static void m15() {
        List<String> stringList = Arrays.asList("hello", "world", "java", "streams");
        String s = stringList.stream().max(Comparator.comparingInt(String::length)).get();
        System.out.println(s);
    }

    //WAP using streams to reverse the list: [1, 2, 3, 4, 5].
    public static void m16() {
        List<Integer> integerList = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> res = integerList.stream().sorted(Comparator.reverseOrder()).toList();
        System.out.println(res);
    }

    //WAP using streams to convert a list of integers to a list of strings: [10, 20, 30, 40, 50]
    public static void m17() {
        List<Integer> integerList = Arrays.asList(10, 20, 30, 40, 50);
        List<String> stringList = integerList.stream().map(Object::toString).toList();
        System.out.println(stringList);
    }

    //WAP using streams to find the index of the first occurrence of a specific element in the list: [5, 10, 15, 20, 25].
    public static void m18() {
        List<Integer> integerList = Arrays.asList(5, 10, 15, 20, 25);
        int num = IntStream.range(0, integerList.size()).filter(item -> integerList.get(item) == 5).findFirst().getAsInt();
        System.out.println(num);
    }

    //WAP using streams to find the product of all elements in the list: [2, 3, 4, 5, 6].
    public static void m19() {
        List<Integer> integerList = Arrays.asList(2, 3, 4, 5, 6);
        int res = integerList.stream().reduce(1, (a, b) -> a * b);
        System.out.println(res);
    }

    // WAP using streams to find the difference between the largest and smallest elements in the list: [10, 5, 15, 20, 25]
    public static void m20() {
        List<Integer> integerList = Arrays.asList(10, 5, 15, 20, 25, 26);
        int min1 = integerList.stream().sorted().findFirst().get();
        int max = integerList.stream().min(Comparator.reverseOrder()).get();
        System.out.println(max - min1);
    }

    //. WAP using streams to determine the second-largest number from the set {1, 2, 4.5, 'e', 'f', 3, 5}.
    public static void m22() {
        List<Object> objectList = Arrays.asList(1, 2, 4, 'e', 'f', 3, 5);
        int res = objectList.stream().filter(item -> item instanceof Number).map(item -> (((Number) item).intValue()))
                .sorted(Comparator.reverseOrder()).skip(1).findFirst().get();
        System.out.println(res);
    }

    // WAP using streams to identify the maximum duplicate element and its count from the array . [1, 2, 3, 1, 3, 3]
    public static void m23() {
        List<Integer> integerList = Arrays.asList(1, 2, 3, 1, 3, 3);
        Map<Integer, Long> map = integerList.stream().collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
        System.out.println(map);
    }

    //WAP using streams to identify the duplicate characters in a string.[helloworld]
    public static void m24() {
        String str = "hello world";
        Map<Character, Long> map = str.chars().mapToObj(c -> (char) c).collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
        System.out.println(map);
    }

    //WAP using streams to count the number of even and odd digits in the number 246813.
    public static void m30() {
        int num = 246813;
        Map<Boolean, List<Integer>> map = String.valueOf(num).chars().map(Character::getNumericValue).boxed().collect(Collectors.partitioningBy(item -> item % 2 == 0));
        System.out.println(map);
    }


LOGICAL CODING
----------------------
 //palindrome no
    public static void m1() {
        int num = 121;
        int revNum = 0;
        while (num > 0) {
            int rem = num % 10;
            revNum = revNum * 10 + rem;
            num = num / 10;
        }
        System.out.println(revNum);
    }

    //sort array manually
    public static void m2() {
        int[] arr = {3, 6, 2, 7, 1};
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                int temp = arr[i + 1];
                arr[i + 1] = arr[i];
                arr[i] = temp;
                i = -1;
            }
        }
        System.out.println(Arrays.toString(arr));
    }

    //string palindrome
    public static void m3() {
        String str = "madam";
        String rev = "";
        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            rev = ch + rev;
        }
        System.out.println(rev);
    }

    //anagram
    public static void m4() {
        String str1 = "abc";
        String str2 = "cab";
        char[] str1Arr = str1.toCharArray();
        char[] str2Arr = str2.toCharArray();
        Arrays.sort(str1Arr);
        Arrays.sort(str2Arr);
        boolean b = Arrays.equals(str1Arr, str2Arr);
        System.out.println(b);
    }

    //fibonacci series
    public static void m5() {
        int num = 10, n1 = 0, n2 = 1;
        System.out.print(n1 + " ,");
        for (int i = 2; i <= num; i++) {
            int n3 = n1 + n2;
            n2 = n1;
            n1 = n3;
            System.out.print(n3 + ", ");
        }
    }

    //factorial
    public static void m6() {
        int num = 5;
        int fact=1;
        for (int i = 1; i <= num; i++) {
            fact=fact*i;
        }
        System.out.println(fact);
    }

Longest substring
--------------------
public static void main(String[] args) {
        String str = "aaababbcccccdd";
        int longestSubStringLength = 0;
        String longestSubstring = "";
        Map<Character, Integer> map = new HashMap<>();
        char[] chars = str.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            char ch = chars[i];
            if (!map.containsKey(ch)) {
                map.put(ch, i);
            } else {
                i = map.get(ch);
                map.clear();
            }
            if(map.size()> longestSubStringLength){
                longestSubStringLength = map.size();
                longestSubstring = map.keySet().toString();
            }
        }
        System.out.println("The Longest substring : " + longestSubstring);
        System.out.println("The Longest substring length: " + longestSubStringLength);
    }



















